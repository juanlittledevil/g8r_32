<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Gates_8cpp" kind="file" language="C++">
    <compoundname>Gates.cpp</compoundname>
    <includes refid="Gates_8h" local="yes">Gates.h</includes>
    <includes refid="Debug_8h" local="yes">Debug.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="2">
        <label>Gates.h</label>
        <link refid="Gates_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Gates.cpp</label>
        <link refid="Gates_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>LED.h</label>
        <link refid="LED_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Debug.h</label>
        <link refid="Debug_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Pin.h</label>
        <link refid="Pin_8h"/>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="8">
        <label>LEDs.h</label>
        <link refid="LEDs_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="6">
        <label>Constants.h</label>
        <link refid="Constants_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Gate.h</label>
        <link refid="Gate_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="Gates_8cpp_1a24fac9ff5bcc1384e1f99ec350941c9a" prot="public" static="no">
        <name>DEBUG_PRINT</name>
        <param><defname>message</defname></param>
        <initializer><ref refid="classDebug_1aec89c31d051cd6de448ccf9a8f29a83d" kindref="member">Debug::print</ref>(__FILE__, __LINE__, __func__, String(message))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Gates.cpp" line="6" column="9" bodyfile="src/Gates.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Gates.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Gates_8h" kindref="compound">Gates.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Debug_8h" kindref="compound">Debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_PRINT(message)<sp/>Debug::print(__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>String(message))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="classGates_1af53ba952e2d91b90884fb38fe1f0fa0d" kindref="member">Gates::Gates</ref>(std::vector&lt;int&gt;<sp/><ref refid="main_8cpp_1a782432745fd904139737a67cfe18cc45" kindref="member">pins</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numGates)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;numGates<sp/>=<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classGate" kindref="compound">Gate</ref>[<ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGates_1a283f2d50700fad8bdca29e6227e65045" kindref="member">gateCounters</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[<ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[i]<sp/>=<sp/><ref refid="classGate" kindref="compound">Gate</ref>(<ref refid="main_8cpp_1a782432745fd904139737a67cfe18cc45" kindref="member">pins</ref>[i]);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a283f2d50700fad8bdca29e6227e65045" kindref="member">gateCounters</ref>[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Fix:<sp/>Add<sp/>missing<sp/>declaration<sp/>of<sp/>&apos;gateCounters&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="classGates_1a7bc98979e801ceb6e28472af3eb0a78f" kindref="member">Gates::~Gates</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>;<sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory<sp/>for<sp/>the<sp/>gate<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classGates_1a283f2d50700fad8bdca29e6227e65045" kindref="member">gateCounters</ref>;<sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory<sp/>for<sp/>the<sp/>gate<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a5a46476bf82868dcfcabb8bb93b14e84" kindref="member">Gates::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[i].<ref refid="classOutputPin_1a26ba6201d8c71d85eec4696558eea0f4" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1ac2c1de1f4bd52fbedb24f9aae00af9d9" kindref="member">Gates::setState</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gateIndex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gateIndex<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>gateIndex<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[gateIndex].<ref refid="classOutputPin_1aad0ad1b49fdbab03f702c7fe62dc7903" kindref="member">setState</ref>(state);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classGates_1a83389338058653f2defddf694a927d56" kindref="member">Gates::getState</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gateIndex)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gateIndex<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>gateIndex<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[gateIndex].<ref refid="classOutputPin_1a925d7942850c2a7f17f0152a64db5e34" kindref="member">getState</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>turn<sp/>on<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a4c955fec75ce64b0eb76b2fcdca2b7ce" kindref="member">Gates::turnOnGate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classOutputPin_1aad0ad1b49fdbab03f702c7fe62dc7903" kindref="member">setState</ref>(HIGH);<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>on<sp/>the<sp/>gate<sp/>at<sp/>the<sp/>specified<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>turn<sp/>off<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a7ab4510b88636eb970d61282353c1eb9" kindref="member">Gates::turnOffGate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classOutputPin_1aad0ad1b49fdbab03f702c7fe62dc7903" kindref="member">setState</ref>(LOW);<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>the<sp/>gate<sp/>at<sp/>the<sp/>specified<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>turn<sp/>on<sp/>or<sp/>off<sp/>all<sp/>gates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a02f76825e2dccc537b4e495b88bbedc4" kindref="member">Gates::setALLGates</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[i].<ref refid="classOutputPin_1aad0ad1b49fdbab03f702c7fe62dc7903" kindref="member">setState</ref>(state);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>state<sp/>of<sp/>the<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>trigger<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a6ef8dcff0ca40853f6ec07d20afa1b9b" kindref="member">Gates::trigger</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classGate_1a6277eacc42d5f84de2a59ea4e062b5bf" kindref="member">trigger</ref>(currentTime);<sp/></highlight><highlight class="comment">//<sp/>Trigger<sp/>the<sp/>gate<sp/>at<sp/>the<sp/>specified<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>set<sp/>the<sp/>division<sp/>of<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1ad2bc306e44f4f9dc025c57cd37e7c97f" kindref="member">Gates::setDivision</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>division)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classGate_1a49ac696e28beeb2d158778c5588f872e" kindref="member">setDivision</ref>(division);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>division<sp/>of<sp/>the<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>division<sp/>of<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGates_1a06f6153e686887048497f965599e6ba4" kindref="member">Gates::getDivision</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classGate_1ab99412ef6a005235669a0acc34bc9c9b" kindref="member">getDivision</ref>();<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>division<sp/>of<sp/>the<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>-1<sp/>if<sp/>the<sp/>index<sp/>is<sp/>out<sp/>of<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>update<sp/>the<sp/>state<sp/>of<sp/>all<sp/>gates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a4397cba12ab477b8759ccf846b5a909d" kindref="member">Gates::update</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[i].<ref refid="classGate_1a420659855b83dd5dcd94b9eda11f5824" kindref="member">update</ref>(currentTime);<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>state<sp/>of<sp/>the<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a4c5925d6eaea3c640d7e23f2219d6991" kindref="member">Gates::setSelectedGate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGates_1aac445c16f01968f9c919815f24f3a0a7" kindref="member">selectedGate</ref><sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGates_1a18d0602275e88db59021394b4a377151" kindref="member">Gates::getSelectedGate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGates_1aac445c16f01968f9c919815f24f3a0a7" kindref="member">selectedGate</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>set<sp/>the<sp/>gate<sp/>on<sp/>duration<sp/>in<sp/>ms<sp/>of<sp/>a<sp/>specific<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGates_1a2450c2bb48ab40c0c81b6a717d2e30ca" kindref="member">Gates::setGateOnDuration</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classGates_1a8aa11d0f9ea6f809549664f8fd4f7cc2" kindref="member">numGates</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>index<sp/>is<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGates_1a4864124d3f822dbed79aa467f454fd1a" kindref="member">gateArray</ref>[index].<ref refid="classGate_1a17f0a9f5f2d7e19367c70d6afd965fa1" kindref="member">setGateOnDuration</ref>(duration);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>gate<sp/>on<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Gates.cpp"/>
  </compounddef>
</doxygen>
