<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Pin_8cpp" kind="file" language="C++">
    <compoundname>Pin.cpp</compoundname>
    <includes refid="Pin_8h" local="yes">Pin.h</includes>
    <includes local="no">Arduino.h</includes>
    <includes refid="Debug_8h" local="yes">Debug.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/Pin.cpp</label>
        <link refid="Pin_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Debug.h</label>
        <link refid="Debug_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Pin.h</label>
        <link refid="Pin_8h"/>
      </node>
      <node id="3">
        <label>Arduino.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="Pin_8cpp_1a24fac9ff5bcc1384e1f99ec350941c9a" prot="public" static="no">
        <name>DEBUG_PRINT</name>
        <param><defname>message</defname></param>
        <initializer><ref refid="classDebug_1aec89c31d051cd6de448ccf9a8f29a83d" kindref="member">Debug::print</ref>(__FILE__, __LINE__, __func__, String(message))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Pin.cpp" line="6" column="9" bodyfile="src/Pin.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>pin.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Pin_8h" kindref="compound">Pin.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Debug_8h" kindref="compound">Debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_PRINT(message)<sp/>Debug::print(__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>String(message))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pin<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="classPin_1a6e2beb63097c3debb9b1db1f425beb5f" kindref="member">Pin::Pin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pin<sp/>=<sp/><ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref><sp/>=<sp/>LOW;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="classPin_1a462c14c45d3d653731dde638aa6e7bb7" kindref="member">Pin::~Pin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>any<sp/>cleanup<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InputPin<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="classInputPin_1acf74eef6677cb410c9f6534f8ec34005" kindref="member">InputPin::InputPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)<sp/>:<sp/><ref refid="classPin" kindref="compound">Pin</ref>(pin),<sp/>useInternalPullup(false),<sp/>useInternalPulldown(false)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;useInternalPullup<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;useInternalPulldown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloaded<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classInputPin_1acf74eef6677cb410c9f6534f8ec34005" kindref="member">InputPin::InputPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>internalPullup,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>internalPulldown)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">:<sp/><sp/><sp/><ref refid="classPin" kindref="compound">Pin</ref>(pin),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>useInternalPullup(internalPullup),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>useInternalPulldown(internalPulldown)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;useInternalPullup<sp/>=<sp/>internalPullup;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;useInternalPulldown<sp/>=<sp/>internalPullup;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>input<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInputPin_1a32cd882e2f65df5d59f832b5e0cf7169" kindref="member">InputPin::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classInputPin_1afecd8c36b767a12c1b557089ff42dd40" kindref="member">useInternalPullup</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>INPUT_PULLUP);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classInputPin_1a0ded483857a69a873d80f0915deb44db" kindref="member">useInternalPulldown</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>INPUT_PULLDOWN);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>INPUT);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>state<sp/>of<sp/>the<sp/>input<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classInputPin_1abcb57baddc2f83f5c969959bbec21047" kindref="member">InputPin::getState</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref><sp/>=<sp/>digitalRead(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnalogInputPin<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classAnalogInputPin_1a4a79d4e964b47c3d94a3581ee39d21a8" kindref="member">AnalogInputPin::AnalogInputPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)<sp/>:<sp/><ref refid="classPin" kindref="compound">Pin</ref>(pin)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>code<sp/>here<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>analog<sp/>input<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classAnalogInputPin_1a747926c64444b5b8f8bff0d9d063ae75" kindref="member">AnalogInputPin::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>INPUT);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>analog<sp/>value<sp/>from<sp/>the<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classAnalogInputPin_1a787d8df0f0810bd7e97bd0e68cff2c49" kindref="member">AnalogInputPin::read</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>analogRead(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OutputPin<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="classOutputPin_1a55e1bf208cb8e2f71664a83de0a78c0b" kindref="member">OutputPin::OutputPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)<sp/>:<sp/><ref refid="classPin" kindref="compound">Pin</ref>(pin)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>code<sp/>here<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>output<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOutputPin_1a26ba6201d8c71d85eec4696558eea0f4" kindref="member">OutputPin::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>state<sp/>of<sp/>the<sp/>output<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOutputPin_1aad0ad1b49fdbab03f702c7fe62dc7903" kindref="member">OutputPin::setState</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newState)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref><sp/>=<sp/>newState;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>digitalWrite(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref><sp/>?<sp/>HIGH<sp/>:<sp/>LOW);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>state<sp/>of<sp/>the<sp/>output<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOutputPin_1a925d7942850c2a7f17f0152a64db5e34" kindref="member">OutputPin::getState</ref>()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPin_1af51a2c85baa1c0387bd5691a808ef1cf" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PWMPin<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="classPWMPin_1ac189246b08e89ae948ccee1f4a804617" kindref="member">PWMPin::PWMPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)<sp/>:<sp/><ref refid="classOutputPin" kindref="compound">OutputPin</ref>(pin)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>code<sp/>here<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>ARDUINO_ARCH_STM32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;timer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HardwareTimer(TIM2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>TIM2<sp/>for<sp/>all<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>PWM<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classPWMPin_1a5cf9cc1fa8d670f9c594c7d09950f159" kindref="member">PWMPin::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>ARDUINO_ARCH_STM32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classPWMPin_1a7567b351a14c913367d125f63490731e" kindref="member">timer</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPWMPin_1a7567b351a14c913367d125f63490731e" kindref="member">timer</ref>-&gt;setMode(1,<sp/>TIMER_OUTPUT_COMPARE_PWM1,<sp/>this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPWMPin_1a7567b351a14c913367d125f63490731e" kindref="member">timer</ref>-&gt;setOverflow(10000,<sp/>MICROSEC_FORMAT);<sp/><sp/></highlight><highlight class="comment">//<sp/>10<sp/>kHz<sp/>PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPWMPin_1a7567b351a14c913367d125f63490731e" kindref="member">timer</ref>-&gt;setCaptureCompare(1,<sp/>0,<sp/>PERCENT_COMPARE_FORMAT);<sp/><sp/></highlight><highlight class="comment">//<sp/>0%<sp/>duty<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPWMPin_1a7567b351a14c913367d125f63490731e" kindref="member">timer</ref>-&gt;resume();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>duty<sp/>cycle<sp/>of<sp/>the<sp/>PWM<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classPWMPin_1af7ef7aa814d7635cb2a1b5716823e7f9" kindref="member">PWMPin::setDutyCycle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dutyCycle)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dutyCycle<sp/>=<sp/><ref refid="classPWMPin_1a622402e0db5330b9909636476ba1a580" kindref="member">dutyCycle</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>analogWrite(this-&gt;<ref refid="classPin_1acf35726490e8ccea7fdeeeb57144bf6d" kindref="member">pin</ref>,<sp/>this-&gt;dutyCycle);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>duty<sp/>cycle<sp/>of<sp/>the<sp/>PWM<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classPWMPin_1ab2fb4da8e9bed797fc975390b5cfd0f5" kindref="member">PWMPin::getDutyCycle</ref>()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPWMPin_1a622402e0db5330b9909636476ba1a580" kindref="member">dutyCycle</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Pin.cpp"/>
  </compounddef>
</doxygen>
